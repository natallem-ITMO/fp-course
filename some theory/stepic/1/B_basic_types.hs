module B_basic_types where

{-
Хаскель - язык со строгой(нет неявного приведения) статической(тип определеяется на этапе компиляции) системой типов
Тип выводится хаскелем самостоятельно
Команда интерпретатора для выяснения типа
  :type 'c'
  -'c' :: Char

:: - оператор типизации в хаскеле
Тип чар включает в себя юникод символы(и все алфавита)

  :type '\n'
  -'\n' :: Char

Еще типы:
  :t True
  -True :: Bool
  :t False
  -False :: Bool
-}


{-
Стандартный набор числовых типов
*целочисленные -  Int(ограниченный размер) и Integer(неограниченный размер)
*с плавающей точкой - Float и Double(одинарная двойная точность)

Все типы -  представители класса Num(механизм классов типов задан для создания общего интерфейса всех чисел(один оператор сложения наприме))

Какой тип имеют операторы?
  :t 3
  -3 :: Num a => a

  let x = 3 :: Int
  :t x
  -x :: Int

  let y = 3 :: Double
  :t y
  -y :: Double

  let z = y + 17
  :t z
  -z :: Double (т к у 17 тип Num, но в операторе сложения определено, что складываем числа одного типа, то z становится Double

  :t 3.5
  -3.5 :: Fractional a => a(к этому классу относятся типы Double and Float)

 NB:
  3.5 :: Integer нельзя
-}


{-             Типы функций
Тип функции - надо задать тип аргумента и функции
Для задания типа функции - оператор (->)

  :t not
  -not :: Bool -> Bool

Но если у нас функция от n аргумнтов, то мы рассматриваем ее как функцию 1го аргумента, возращающую функцию n-1 аргумента
(->) - правоассоциативен, тогда вместо Bool -> (Bool -> Bool) пишем Bool -> Bool -> Bool
  :t (&&)
  - (&&) :: Bool -> Bool -> Bool

Кол-во аргументов - кол-во стрелочек. Возращаемое значение - последний тип.
-}


{-
Не все библиотечный функции доступны из стандартной Prelude'ии, но чтобы получить доступ к остальным, надо импортрировать другие модули
  После задания модуля в начале файла пишем:
-}

import Data.Char
test = isDigit '7'

{-
импортировать модуль можно напрямую из интерпретатора
  import Data.Complex

Для выяснения названий модулей и функций в них, можем использовать Hoogle

(toLower - функция перевода в нижний регистр)
(isDigit - проверка символа на число)
(digitToInt - конвертация из символа в число)
-}


{-
Картеж - упорядоченный набор элементов фиксированной длины

  (5, True)

(fst - фукнция для двухэлементых картежей, возращающая 1ый)
(snd - ~~~~, возмращающая 2ой)

  :t ('3', True, 45)
  ('3', True, 45) :: Num t => (Char, Bool, t)

Единичного картежа нет
      (4) - скобки - декоративный элемент для группировки
Пустой картеж ()
  :t ()
  () :: ()
-}


{-
Списки(как и картежи) - контейнерные типы
Списки гомогенны - все элементы принадлежат одному тип
Длина списка может изменяться
^
отличие списков от картежей

  [1,2,4] - список чисел
  :t [3,5,2,1]
  -[3,5,2,1] :: Num t => [t]

  :t [True, False]
  -[True, False] :: Bool

Для списков Char'ов особый синтаксис
  ['3', 'x']
  -"3x"
Это одно и то же, тип у строк и списков Char'ов тоже одинаковый

  "Hey" :: String
  "Hey" :: [Char]
-}


{-
Cписки это базовая структура для хаскеля и для ФП.

(:) - оператор добавления элемента в голову списка
(++) - оператор конкатенации двух списков(списки одного типа)

  :info (:)
  -infixr 5 :

  :info (++)
  -infixr 5 ++
-}




