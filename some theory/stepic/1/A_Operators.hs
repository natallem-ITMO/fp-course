module A_Operators where
maxAsOperator x y = x `max` y
sumAsFunction x y = (+) x y
--все операторы бинарные кроме унарного минуса, поэтому пишем (-7) в скобках:
x = sumAsFunction 4 (-6)


{-                                      Приоритет операций
от 0 до 10

Приоритет функции - самый высокий приоритет - 10
sin 10 + 5 <=> (sin 10) + 5


ассоциативность, приоритет, операции
infixr 8 ^, `logBase`
infixl 7 *, /, `div`, `mod`
infixl 6 +, -
infix 4 ==, /=, >= , > , <= , < нельзя составлять цепочки так как нет приорита

если приоритет, ассоциативность не заданы, то по дефолту:  infixl 9
-}


{-                                      Задание своего оператора

Возможные символы
! $ % > < . & # @ ^ | \ - ~ = ?
можно комбинировать.
Определим свой оператор
-}
infixl 6 *+*
(*+*) x y = x^2 + y^2
--или
x *+ y = x + y
infixl 6 *+


{-             Синтаксис для частичного применения оператора - сечение оператора-}
divideTwo1 = (/) 2
divideTwo = (2 /)
divideByTwo = (/ 2)
{-синтаксис сечения требует скобки
 у оператора минус не существует правого сечения
 (- 2) - унарный минус-}


{-             Оператор $
Рассматриваем применение фукнции с пробелом. Пробел - как оператор двух аргументов

infixr 0 $
f $ x = f x (определен в стандартной библиотеке)

Плюсы - помогает избавиться от лишних скобок изза малого приоритета
sin(Pi/2) <=> sin $ Pi / 2
f (g h (c y)) <=> f $ g h (c y)<=> f $ g h $ c y
-}


